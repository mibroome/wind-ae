#!/usr/bin/env python3

# Source paper: Sung et al. 2013 (2013JKAS...46..103S)

import bisect
import numpy as np
from scipy.interpolate import Akima1DInterpolator as Akima1D

# Table 5 columns: spectral type, class V, III, and Iab data
# class data: T_eff, B–V, U–B, and BC
_Table5 = [
    ['O2',
     [4.720, -0.33, -1.22, -4.52],
     [4.672, -.325, -1.20, -4.22],
     [4.648, -0.33, -1.19, -4.06]
    ],
    ['O3',
     [4.672, -0.33, -1.21, -4.19],
     [4.647, -.325, -1.20, -4.02],
     [4.628, -0.33, -1.18, -3.90]
    ],
    ['O4',
     [4.636, -0.33, -1.20, -3.94],
     [4.626, -.325, -1.19, -3.88],
     [4.607, -0.32, -1.17, -3.73]
    ],
    ['O5',
     [4.610, -.325, -1.19, -3.77],
     [4.605, -.325, -1.19, -3.72],
     [4.585, -0.31, -1.16, -3.57]
    ],
    ['O6',
     [4.583, -.325, -1.18, -3.58],
     [4.580, -0.32, -1.18, -3.54],
     [4.565, -0.30, -1.15, -3.43]
    ],
    ['O7',
     [4.554, -.325, -1.17, -3.39],
     [4.556, -0.32, -1.16, -3.39],
     [4.544, -0.29, -1.14, -3.29]
    ],
    ['O8',
     [4.531, -0.32, -1.15, -3.23],
     [4.531, -0.31, -1.14, -3.21],
     [4.519, -0.28, -1.13, -3.11]
    ],
    ['O9',
     [4.508, -.315, -1.13, -3.03],
     [4.505, -0.31, -1.12, -3.05],
     [4.498, -.275, -1.12, -2.96]
    ],
    ['B0',
     [4.470, -.305, -1.08, -2.84],
     [4.459, -.295, -1.07, -2.73],
     [4.445, -.255, -1.09, -2.66]
    ],
    ['B1',
     [4.400, -.275, -0.98, -2.40],
     [4.389, -0.27, -0.98, -2.41],
     [4.353, -0.20, -1.01, -2.13]
    ],
    ['B2',
     [4.325, -0.24, -0.87, -2.02],
     [4.304, -.235, -0.84, -1.95],
     [4.272, -.155, -0.91, -1.70]
    ],
    ['B3',
     [4.265, -0.21, -0.75, -1.62],
     [4.240, -.205, -0.72, -1.56],
     [4.203, -0.12, -0.82, -1.31]
    ],
    ['B5',
     [4.180, -0.17, -0.58, -1.22],
     [4.175, -0.17, -0.57, -1.19],
     [4.117, -0.07, -0.69, -0.87]
    ],
    ['B6',
     [4.145, -0.15, -0.50, -1.02],
     [4.146, -0.15, -0.50, -1.02],
     [4.090, -0.05, -0.64, -0.73]
    ],
    ['B7',
     [4.115, -0.13, -0.43, -0.85],
     [4.117, -0.13, -0.42, -0.86],
     [4.067, -0.03, -0.59, -0.60]
    ],
    ['B8',
     [4.080, -0.11, -0.35, -0.66],
     [4.080, -.105, -0.32, -0.66],
     [4.044, -0.02, -0.54, -0.49]
    ],
    ['B9',
     [4.028, -0.07, -0.19, -0.39],
     [4.037, -0.07, -0.18, -0.44],
     [4.021, -.005, -0.49, -0.38]
    ],
    ['A0',
     [3.995, -0.01, -0.01, -0.24],
     [3.998, -0.03, -0.06, -0.25],
     [3.993,  .015, -0.41, -0.26]
    ],
    ['A1',
     [3.974,  0.02,  0.03, -0.15],
     [3.976,  0.01,  0.01, -0.15],
     [3.977,  .035, -0.32, -0.20]
    ],
    ['A2',
     [3.958,  0.05,  0.06, -0.08],
     [3.954,  0.05,  0.06, -0.07],
     [3.960,  0.05, -0.23, -0.12]
    ],
    ['A3',
     [3.942,  0.08,  0.08, -0.03],
     [3.935,  0.09,  0.08,  0.00],
     [3.946,  0.07, -0.15, -0.05]
    ],
    ['A5',
     [3.915,  0.15,  0.10,  0.00],
     [3.907,  0.15,  0.10,  0.05],
     [3.928,  0.10, -0.07,  0.00]
    ],
    ['A6',
     [3.902,  0.18,  0.10,  0.01],
     [3.895,  0.19,  0.11,  0.06],
     [3.920,  0.11, -0.03,  0.03]
    ],
    ['A7',
     [3.889,  0.21,  0.09,  0.02],
     [3.885,  0.22,  0.11,  0.06],
     [3.910,  .125,  0.01,  0.05]
    ],
    ['A8',
     [3.877,  0.25,  0.08,  0.02],
     [3.875,  0.25,  0.10,  0.06],
     [3.902,  0.14,  0.05,  0.07]
    ],
    ['F0',
     [3.855,  0.31,  0.05,  0.01],
     [3.855,  0.31,  0.08,  0.05],
     [3.885,  0.17,  0.11,  0.10]
    ],
    ['F1',
     [3.843,  0.34,  0.02,  0.01],
     [3.847,  0.33,  0.07,  0.04],
     [3.875,  0.19,  0.14,  0.11]
    ],
    ['F2',
     [3.832,  0.37,  0.00,  0.00],
     [3.839,  0.36,  0.07,  0.04],
     [3.867,  0.21,  0.19,  0.12]
    ],
    ['F3',
     [3.822,  0.40, -0.01,  0.00],
     [3.830,  0.38,  0.07,  0.03],
     [3.858,  0.24,  0.22,  0.12]
    ],
    ['F5',
     [3.806,  0.45, -0.02, -0.01],
     [3.813,  0.43,  0.08,  0.02],
     [3.836,  0.32,  0.28,  0.11]
    ],
    ['F6',
     [3.800,  0.48, -0.01, -0.02],
     [3.805,  0.46,  0.09,  0.01],
     [3.822,  0.38,  0.31,  0.10]
    ],
    ['F7',
     [3.794,  0.50,  0.00, -0.02],
     [3.796,  0.48,  0.07,  0.00],
     [3.807,  0.45,  0.35,  0.08]
    ],
    ['F8',
     [3.789,  0.53,  0.02, -0.03],
     [3.785,  0.52,  0.07, -0.01],
     [3.790,  0.55,  0.40,  0.05]
    ],
    ['G0',
     [3.780,  0.59,  0.07, -0.04],
     [3.763,  0.64,  0.17, -0.05],
     [3.750,  0.78,  0.50, -0.05]
    ],
    ['G1',
     [3.775,  0.61,  0.09, -0.04],
     [3.750,  0.70,  0.30, -0.08],
     [3.734,  0.84,  0.55, -0.09]
    ],
    ['G2',
     [3.770,  0.63,  0.13, -0.05],
     [3.737,  0.77,  0.41, -0.11],
     [3.718,  0.88,  0.60, -0.16]
    ],
    ['G3',
     [3.767,  0.65,  0.15, -0.06],
     [3.725,  0.85,  0.49, -0.15],
     [3.705,  0.92,  0.66, -0.21]
    ],
    ['G5',
     [3.759,  0.68,  0.21, -0.07],
     [3.706,  0.90,  0.62, -0.22],
     [3.685,  1.00,  0.82, -0.32]
    ],
    ['G6',
     [3.755,  0.70,  0.23, -0.08],
     [3.700,  0.92,  0.65, -0.25],
     [3.679,  1.04,  0.90, -0.35]
    ],
    ['G7',
     [3.752,  0.72,  0.26, -0.09],
     [3.693,  0.94,  0.67, -0.28],
     [3.675,  1.08,  0.98, -0.37]
    ],
    ['G8',
     [3.745,  0.74,  0.30, -0.10],
     [3.689,  0.96,  0.70, -0.30],
     [3.670,  1.12,  1.04, -0.40]
    ],
    ['K0',
     [3.720,  0.81,  0.45, -0.18],
     [3.675,  1.01,  0.87, -0.37],
     [3.648,  1.20,  1.14, -0.54]
    ],
    ['K1',
     [3.705,  0.86,  0.54, -0.24],
     [3.664,  1.08,  1.02, -0.44],
     [3.635,  1.24,  1.22, -0.65]
    ],
    ['K2',
     [3.690,  0.91,  0.65, -0.32],
     [3.648,  1.16,  1.16, -0.54],
     [3.619,  1.32,  1.34, -0.80]
    ],
    ['K3',
     [3.675,  0.96,  0.77, -0.41],
     [3.630,  1.26,  1.36, -0.68],
     [3.602,  1.42,  1.54, -0.98]
    ],
    ['K5',
     [3.638,  1.15,  1.06, -0.65],
     [3.607,  1.50,  1.83, -0.92],
     [3.589,  1.60,  1.85, -1.14]
    ],
    ['M0',
     [3.580,  1.40,  1.23, -1.18],
     [3.588,  1.57,  1.92, -1.14],
     [3.579,  1.63,  1.94, -1.27]
    ],
    ['M1',
     [3.562,  1.47,  1.21, -1.39],
     [3.580,  1.59,  1.92, -1.25],
     [3.573,  1.64,  1.98, -1.35]
    ],
    ['M2',
     [3.544,  1.49,  1.18, -1.64],
     [3.572,  1.60,  1.92, -1.37],
     [3.563,  1.64,  1.98, -1.53]
    ],
    ['M3',
     [3.525,  1.53,  1.15, -2.02],
     [3.559,  1.60,  1.90, -1.64],
     [3.557,  1.64,  1.96, -1.64]
    ],
    ['M4',
     [3.498,  1.56,  1.14, -2.55],
     [3.547,  1.60,  1.81, -1.90],
     [3.547,  1.64,  1.72, -1.82]
    ],
    ['M5',
     [3.477,  1.61,  1.19, -3.05],
     [3.533,  1.57,  1.65, -2.22],
     [3.538,  1.62,  1.38, -2.05]
    ]
]

# seperate each class' data in ascending T_eff order
_dwarf = [x[1] for x in _Table5[::-1]]
_gaint = [x[2] for x in _Table5[::-1]]
_super = [x[3] for x in _Table5[::-1]]

# B–V(T) interpolation function
_dwarfBV = Akima1D([10**x[0] for x in _dwarf], [x[1] for x in _dwarf])
_gaintBV = Akima1D([10**x[0] for x in _gaint], [x[1] for x in _gaint])
_superBV = Akima1D([10**x[0] for x in _super], [x[1] for x in _super])

def _Temp2BV(T_eff, lum_class='V'):
    """
    Description:
        Turns an effective temperature into a B–V colour. Data set covers
        dwarfs (V), gaints (III), and intermediate-size luminous supergaints
        (Iab). Uses 1-D Akima interpolation.
        
    Notes:
        ^If T_eff isoutside of data range returns nan. 
        ^log_T_eff range: ~3.5 thru ~4.7 (depends on lum_class)
        ^These results are in good agreement with Ballesteros 2012, which is
         a fit to perfect black-bodies, for temperatures between 4e3 and
         1.2e4 K. Sung found that cooler stars are more blue, while hotter
         stars are more red, than black-bodies would predict.
         
    Arguments:
        T_eff: effective temperature of star (in Kelvin)
        
    Keyword arguments:
        lum_class: luminosity class of star ('V', 'III', or 'Iab')
        
    Returns:
        A B-V colour
        
    Source paper:
        Sung et al. 2013 (2013JKAS...46..103S)
    """
    if lum_class == 'V':
        return _dwarfBV(T_eff)
    elif lum_class == 'III':
        return _gaintBV(T_eff)
    elif lum_class == 'Iab':
        return _superBV(T_eff)
    else:
        return
Temp2BV = np.vectorize(_Temp2BV)